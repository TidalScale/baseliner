---
- name: check if image already exists
  shell: 'docker images | grep {{ bench.image }} | wc -l'
  register: image_exists

- name: pull image
  command: 'docker pull {{ bench.image }}'
  register: dockerpull_cmd
  failed_when:
  - dockerpull_cmd.rc != 0
  - image_exists.rc == 1
  - not {{ ignore_pull_error_if_image_exists | default(false) }}

- name: define name of container
  set_fact:
    container_name: 'baseliner_{{ inventory_hostname_short }}'

- name: initialize docker_flags variable
  set_fact:
    docker_flags: ''

- name: add environment to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -e {{ item.key }}="{{ item.value }}"'
  with_dict: '{{ bench.environment | default({}) }}'
- name: add implicit environment from bench_params variable
  set_fact:
    docker_flags: '{{ docker_flags }} -e {{ item.key }}="{{ item.value }}"'
  with_dict: '{{ bench_params | default({}) }}'

- name: check if we have host-specific ips
  set_fact:
    ip_host_map: '{{ bench.ip_host | default({}) }}'
- name: add host-specific ips to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} --ip {{ ip_host_map[inventory_hostname] }}"'
  when: inventory_hostname in ip_host_map

- name: check if we have host-specific environment
  set_fact:
    env_host_map: '{{ bench.environment_host | default({}) }}'
- name: add host-specific environment to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -e {{ item.key }}="{{ item.value }}"'
  with_dict: '{{ env_host_map[inventory_hostname] | default({}) }}'

- name: add devices to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} --device {{ item }}'
  with_items: '{{ bench.devices | default([]) }}'

- name: add network mode to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} --net={{ bench.network_mode }}'
  when: bench.network_mode is defined

- name: add user to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} --user={{ bench.user }}'
  when: bench.user is defined

- name: add ipc mode to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} --ipc={{ bench.ipc }}'
  when: bench.ipc is defined

- name: add ports to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -p {{ item }}'
  with_items: '{{ bench.ports | default([]) }}'

- name: add volumes to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -v {{ item }}'
  with_items: '{{ bench.volumes | default([]) }}'

- name: add default volumes to docker_flags
  set_fact:
    docker_flags: '{{ docker_flags }} -v {{ remote_results_path }}:/results -v {{ remote_results_path }}:/output'

- name: set entrypoint
  set_fact:
    docker_flags: '{{ docker_flags }} --entrypoint={{ bench.entrypoint }}'
  when: bench.entrypoint is defined

- name: set limits
  set_fact:
    docker_flags: '{{ docker_flags }} --{{ item.key }}={{ item.value }}'
  with_dict: '{{ bench.limits | default({}) }}'

- name: add capabilities
  set_fact:
    docker_flags: '{{ docker_flags }} --cap-add={{ bench.cap_add | join(",") }}'
  when: bench.cap_add is defined

- name: remove capabilities
  set_fact:
    docker_flags: '{{ docker_flags }} --cap-drop={{ bench.cap_drop | join(",") }}'
  when: bench.cap_drop is defined

- name: set privileged mode
  set_fact:
    docker_flags: '{{ docker_flags }} --privileged'
  when: bench.privileged | default(False)

- name: set memory constraint
  set_fact:
    docker_flags: '{{ docker_flags }} --memory={{ bench.memory }}'
  when: bench.memory is defined

- name: set memory-swap constraint
  set_fact:
    docker_flags: '{{ docker_flags }} --memory-swap={{ bench.memory_swap }}'
  when: bench.memory_swap is defined

- name: set parent cgroup
  set_fact:
    docker_flags: '{{ docker_flags }} --cgroup-parent={{ bench.cgroup_parent }}'
  when: bench.cgroup_parent is defined

- debug:
    msg: 'Number of active hosts: {{ ansible_play_hosts | length }}'
  run_once: true

- debug:
    msg: 'docker run --rm {{ docker_flags }} {{ bench.image }} {{ bench.command | default("") }}'

- name: run container
  shell: docker run --rm --name {{ container_name }} {{ docker_flags }} {{ bench.image }} {{ bench.command | default("") }}
  environment: '{{ bench_params }}'
  async: 1000000
  poll: 0
  register: docker_async_run

- name: wait for containers in parallel mode and stop/kill them if they timeout
  local_action: command {{ role_path }}/scripts/wait_for_containers -i {{ inventory_file }} -c 1 -t {{ bench.test_timeout | default(test_timeout | default(6000)) }} -d {{ test_wait_delay | default(300) }}
  when: baseliner_execution_mode | default("single-node") == "parallel"
  register: wait_for_result_parallel
  run_once: true

- name: wait for containers in single-node mode and stop/kill them if they timeout
  local_action: command {{ role_path }}/scripts/wait_for_containers -i {{ inventory_file }} -c {{ ansible_play_hosts | length }} -t {{ bench.test_timeout | default(test_timeout | default(6000)) }} -d {{ test_wait_delay | default(300) }}
  when: baseliner_execution_mode | default("single-node") == "single-node"
  register: wait_for_result_singlenode
  run_once: true

- name: get wait result
  local_action:
    module: set_fact
    wait_result: '{{ (wait_for_result_parallel.stdout | default("")) + " " + (wait_for_result_singlenode.stdout | default("")) }}'
  run_once: true

- local_action:
    module: debug
    msg: 'WAIT_FOR_RESULT: {{ wait_result }}'
  run_once: true

- name: get result of container execution
  async_status:
    jid: '{{ docker_async_run.ansible_job_id }}'
  register: docker_run
  ignore_errors: true

- debug:
    msg: 'docker_run: {{ docker_run }}'

- name: set fact to store result of bench execution
  local_action:
    module: set_fact
    bench_run_result: '{{ docker_run.rc }}'
  run_once: true

- name: record elapsed time in output folder
  local_action:
    module: copy
    content: '{{ docker_run.delta }}'
    dest: '{{ output_folder }}/runtime'

- name: capture stdout
  local_action:
    module: copy
    content: '{{ docker_run.stdout }}'
    dest: '{{ output_folder }}/std.out'

- name: capture stderr
  local_action:
    module: copy
    content: '{{ docker_run.stderr }}'
    dest: '{{ output_folder }}/std.err'

- debug:
    msg: 'WARNING: container terminated with non-zero exit code.'
  when:
  - '"timeout waiting for" not in wait_result'
  - docker_run.rc != 0
  - baseliner_execution_mode | default("single-node") == "single-node"
